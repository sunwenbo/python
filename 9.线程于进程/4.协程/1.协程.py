'''
子程序/函数：在所有语言中都是层级调用，
比如A调用B，在B执行的过程中又可以调用C，C执行完毕返回，最后是A执行完毕
通过栈实现的，一个线程就是执行一个子程序，子程序调用总是一个入口，调用的顺序是明确的。

协程概述：看上去也是子程序，但执行过程中，在子程序但内部可中断。然后转而去执行别的子程序。
不是函数调用。


子程序调用例子：
def A():
    print("A--start")
    B()
    print("A--end")

def B():
    print("B--start")
    C()
    print("B--end")

def C():
    print("C--start")
    print("C--end")
A()
'''
#协程例子
'''
1 x y z 2 3  执行出这个结果
但是A中没有调用B函数
看起来A、B执行过程有点像线程，但协程但特点在于是一个线程执行

与线程相比：协程但执行效率极高，因为只有一个线程，也不存在同时写变量的冲突，
在协程中共享资源不加锁，只需要判断状态。
'''
def A():
    print("1")
    print("2")
    print("3")
def B():
    print("x")
    print("y")
    print("z")

